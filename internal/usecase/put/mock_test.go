// Code generated by MockGen. DO NOT EDIT.
// Source: put.go

// Package put_test is a generated GoMock package.
package put_test

import (
	domain "crud/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiUpdateUserFromDatabase is a mock of iUpdateUserFromDatabase interface.
type MockiUpdateUserFromDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockiUpdateUserFromDatabaseMockRecorder
}

// MockiUpdateUserFromDatabaseMockRecorder is the mock recorder for MockiUpdateUserFromDatabase.
type MockiUpdateUserFromDatabaseMockRecorder struct {
	mock *MockiUpdateUserFromDatabase
}

// NewMockiUpdateUserFromDatabase creates a new mock instance.
func NewMockiUpdateUserFromDatabase(ctrl *gomock.Controller) *MockiUpdateUserFromDatabase {
	mock := &MockiUpdateUserFromDatabase{ctrl: ctrl}
	mock.recorder = &MockiUpdateUserFromDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUpdateUserFromDatabase) EXPECT() *MockiUpdateUserFromDatabaseMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockiUpdateUserFromDatabase) GetUser(id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockiUpdateUserFromDatabaseMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockiUpdateUserFromDatabase)(nil).GetUser), id)
}

// UpdateUser mocks base method.
func (m *MockiUpdateUserFromDatabase) UpdateUser(id string, newdata domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, newdata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockiUpdateUserFromDatabaseMockRecorder) UpdateUser(id, newdata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockiUpdateUserFromDatabase)(nil).UpdateUser), id, newdata)
}

// MockiUpdateUserFile is a mock of iUpdateUserFile interface.
type MockiUpdateUserFile struct {
	ctrl     *gomock.Controller
	recorder *MockiUpdateUserFileMockRecorder
}

// MockiUpdateUserFileMockRecorder is the mock recorder for MockiUpdateUserFile.
type MockiUpdateUserFileMockRecorder struct {
	mock *MockiUpdateUserFile
}

// NewMockiUpdateUserFile creates a new mock instance.
func NewMockiUpdateUserFile(ctrl *gomock.Controller) *MockiUpdateUserFile {
	mock := &MockiUpdateUserFile{ctrl: ctrl}
	mock.recorder = &MockiUpdateUserFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUpdateUserFile) EXPECT() *MockiUpdateUserFileMockRecorder {
	return m.recorder
}

// UpdateUser mocks base method.
func (m *MockiUpdateUserFile) UpdateUser(filename, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", filename, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockiUpdateUserFileMockRecorder) UpdateUser(filename, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockiUpdateUserFile)(nil).UpdateUser), filename, data)
}
