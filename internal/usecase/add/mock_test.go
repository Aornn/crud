// Code generated by MockGen. DO NOT EDIT.
// Source: add.go

// Package add_test is a generated GoMock package.
package add_test

import (
	domain "crud/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiAddUserInDatabase is a mock of iAddUserInDatabase interface.
type MockiAddUserInDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockiAddUserInDatabaseMockRecorder
}

// MockiAddUserInDatabaseMockRecorder is the mock recorder for MockiAddUserInDatabase.
type MockiAddUserInDatabaseMockRecorder struct {
	mock *MockiAddUserInDatabase
}

// NewMockiAddUserInDatabase creates a new mock instance.
func NewMockiAddUserInDatabase(ctrl *gomock.Controller) *MockiAddUserInDatabase {
	mock := &MockiAddUserInDatabase{ctrl: ctrl}
	mock.recorder = &MockiAddUserInDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiAddUserInDatabase) EXPECT() *MockiAddUserInDatabaseMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockiAddUserInDatabase) AddUser(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockiAddUserInDatabaseMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockiAddUserInDatabase)(nil).AddUser), user)
}

// GetUser mocks base method.
func (m *MockiAddUserInDatabase) GetUser(id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockiAddUserInDatabaseMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockiAddUserInDatabase)(nil).GetUser), id)
}

// MockiWriteUserToFile is a mock of iWriteUserToFile interface.
type MockiWriteUserToFile struct {
	ctrl     *gomock.Controller
	recorder *MockiWriteUserToFileMockRecorder
}

// MockiWriteUserToFileMockRecorder is the mock recorder for MockiWriteUserToFile.
type MockiWriteUserToFileMockRecorder struct {
	mock *MockiWriteUserToFile
}

// NewMockiWriteUserToFile creates a new mock instance.
func NewMockiWriteUserToFile(ctrl *gomock.Controller) *MockiWriteUserToFile {
	mock := &MockiWriteUserToFile{ctrl: ctrl}
	mock.recorder = &MockiWriteUserToFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiWriteUserToFile) EXPECT() *MockiWriteUserToFileMockRecorder {
	return m.recorder
}

// Checkfile mocks base method.
func (m *MockiWriteUserToFile) Checkfile(filename string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkfile", filename)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Checkfile indicates an expected call of Checkfile.
func (mr *MockiWriteUserToFileMockRecorder) Checkfile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkfile", reflect.TypeOf((*MockiWriteUserToFile)(nil).Checkfile), filename)
}

// WriteUser mocks base method.
func (m *MockiWriteUserToFile) WriteUser(filename, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUser", filename, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUser indicates an expected call of WriteUser.
func (mr *MockiWriteUserToFileMockRecorder) WriteUser(filename, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUser", reflect.TypeOf((*MockiWriteUserToFile)(nil).WriteUser), filename, data)
}
