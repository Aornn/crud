// Code generated by MockGen. DO NOT EDIT.
// Source: get.go

// Package get_test is a generated GoMock package.
package get_test

import (
	pkg "crud/pkg"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockiGetUser is a mock of iGetUser interface.
type MockiGetUser struct {
	ctrl     *gomock.Controller
	recorder *MockiGetUserMockRecorder
}

// MockiGetUserMockRecorder is the mock recorder for MockiGetUser.
type MockiGetUserMockRecorder struct {
	mock *MockiGetUser
}

// NewMockiGetUser creates a new mock instance.
func NewMockiGetUser(ctrl *gomock.Controller) *MockiGetUser {
	mock := &MockiGetUser{ctrl: ctrl}
	mock.recorder = &MockiGetUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiGetUser) EXPECT() *MockiGetUserMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockiGetUser) Process(l *zap.Logger, id string) (*pkg.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", l, id)
	ret0, _ := ret[0].(*pkg.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockiGetUserMockRecorder) Process(l, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockiGetUser)(nil).Process), l, id)
}
