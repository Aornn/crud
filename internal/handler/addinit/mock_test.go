// Code generated by MockGen. DO NOT EDIT.
// Source: addinit.go

// Package addinit_test is a generated GoMock package.
package addinit_test

import (
	domain "crud/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockiAddUser is a mock of iAddUser interface.
type MockiAddUser struct {
	ctrl     *gomock.Controller
	recorder *MockiAddUserMockRecorder
}

// MockiAddUserMockRecorder is the mock recorder for MockiAddUser.
type MockiAddUserMockRecorder struct {
	mock *MockiAddUser
}

// NewMockiAddUser creates a new mock instance.
func NewMockiAddUser(ctrl *gomock.Controller) *MockiAddUser {
	mock := &MockiAddUser{ctrl: ctrl}
	mock.recorder = &MockiAddUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiAddUser) EXPECT() *MockiAddUserMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockiAddUser) Process(l *zap.Logger, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", l, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockiAddUserMockRecorder) Process(l, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockiAddUser)(nil).Process), l, user)
}
