// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package login_test is a generated GoMock package.
package login_test

import (
	domain "crud/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockiLogUser is a mock of iLogUser interface.
type MockiLogUser struct {
	ctrl     *gomock.Controller
	recorder *MockiLogUserMockRecorder
}

// MockiLogUserMockRecorder is the mock recorder for MockiLogUser.
type MockiLogUserMockRecorder struct {
	mock *MockiLogUser
}

// NewMockiLogUser creates a new mock instance.
func NewMockiLogUser(ctrl *gomock.Controller) *MockiLogUser {
	mock := &MockiLogUser{ctrl: ctrl}
	mock.recorder = &MockiLogUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiLogUser) EXPECT() *MockiLogUserMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockiLogUser) Process(l *zap.Logger, userLogin *domain.UserLogin) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", l, userLogin)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockiLogUserMockRecorder) Process(l, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockiLogUser)(nil).Process), l, userLogin)
}
